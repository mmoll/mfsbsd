#!/bin/sh
# $Id$
#
# mfsBSD ZFS install script
# Copyright (c) 2011-2015 Martin Matuska <mm at FreeBSD.org>
#
FS_LIST="var tmp"

usage() {
  echo "Usage: $0 [-h] -d geom_provider -u dist_url [-s swap_partition_size]"
}

help() {
  echo; echo "Install FreeBSD using UFS from a compressed archive"
  echo; echo "Required flags:"
  echo "-d geom_provider  : geom provider(s) to install to (e.g. da0)"
  echo "-u dist_url       : URL or directory with base.txz and kernel.txz"
  echo; echo "Optional flags:"
  echo "-s swap_part_size : create a swap partition with given size (default: no swap)"
  echo "-m mount_point    : use this mount point for operations (default: /mnt)"
}

while getopts d:u:s:m:h o; do
  case "$o" in
    d) DEV="${OPTARG}" ;;
    u) URL="${OPTARG}" ;;
    s) SWAP="${OPTARG}" ;;
    m) MNT="${OPTARG}" ;;
    h) help; exit 1;;
    [?]) usage; exit 1;;
esac
done

if [ -z "$DEV" -o -z "$URL" -a -z "$ARCHIVE" ]; then
  usage
  exit 1
fi

if ! [ -c "/dev/${DEV}" ]; then
  echo "Error: /dev/${DEV} is not a block device"
  exit 1
fi

if /sbin/gpart show $DEV > /dev/null 2> /dev/null; then
  echo "Error: /dev/${DEV} already contains a partition table."
  echo ""
  /sbin/gpart show $DEV
  echo "You may erase the partition table manually with the destroygeom command"
  exit 1
fi

if [ -z "${URL}" ]; then
  if ! [ -f "${ARCHIVE}" ]; then
    echo "Error: file $ARCHIVE does not exist"
    exit 1
  else
    EXTRACT_FILES=${ARCHIVE}
  fi
else
  if [ -d "${URL}" ]; then
    for file in base.txz kernel.txz; do
      if ! [ -f "${URL}/${file}" ]; then
        echo "File not found: ${URL}/${file}"
        exit 1
      fi
    done
    EXTRACT_FILES="${URL}/base.txz ${URL}/kernel.txz"
  else
    EXTRACT_FILES="/tmp/base.txz /tmp/kernel.txz"
  fi
fi

if [ -z "$MNT" ]; then
  MNT=/mnt
fi

if ! [ -d "${MNT}" ]; then
  echo "Error: $MNT is not a directory"
  exit 1
fi

# Fetch base.txz and kernel.txz

if [ -n "${URL}" -a ! -d "${URL}" ]; then
  if ! /usr/bin/fetch -o /tmp/base.txz "${URL}/base.txz"; then
    echo "Error fetching ${URL}/base.txz"
    exit 1
  elif ! /usr/bin/fetch -o /tmp/kernel.txz "${URL}/kernel.txz"; then
    echo "Error fetching ${URL}/kernel.txz"
    exit 1
  fi
fi

# Create GPT

echo -n "Creating GUID partitions on ${DEV} ..."
if ! /sbin/gpart create -s GPT /dev/${DEV} > /dev/null; then
  echo " error"
  exit 1
fi
/bin/sleep 1
if ! echo "a 1" | /sbin/fdisk -f - ${DEV} > /dev/null 2> /dev/null; then
  echo " error"
  exit 1
fi
if ! /sbin/gpart add -t freebsd-boot -b 40 -s 472 ${DEV} > /dev/null; then
  echo " error"
  exit 1
fi
if [ -n "${SWAP}" ]; then
  if ! /sbin/gpart add -a 1024k -t freebsd-swap -s "${SWAP}" ${DEV} > /dev/null; then
    echo " error"
    exit 1
  fi
  SWAPPART=`/sbin/glabel status ${DEV}p2 | /usr/bin/grep gptid | /usr/bin/awk '{ print $1 }'`
  if [ -z "$SWAPPART" ]; then
    echo " error determining swap partition"
  fi
  if [ -z "$FSWAP" ]; then
    FSWAP=${SWAPPART}
  fi
fi
if ! /sbin/gpart add -a 1024k -t freebsd-ufs ${DEV} > /dev/null; then
  echo " error"
  exit 1
fi
/bin/dd if=/dev/zero of=/dev/${DEV}p2 bs=512 count=560 > /dev/null 2> /dev/null
if [ -n "${SWAP}" ]; then
  /bin/dd if=/dev/zero of=/dev/${DEV}p3 bs=512 count=560 > /dev/null 2> /dev/null
fi
echo " done"

echo -n "Configuring UFS bootcode on ${DEV} ..."
  if ! /sbin/gpart bootcode -b /boot/pmbr -p /boot/gptboot -i 1 ${DEV} > /dev/null; then
  echo " error"
  exit 1
fi
echo " done"
/sbin/gpart show ${DEV}

# Create ufs

PARTNR=`/sbin/gpart show ${DEV} | /usr/bin/grep freebsd-ufs | /usr/bin/awk '{ print $3 }'`
PART=/dev/${DEV}p${PARTNR}

if [ -z "${PART}" ]; then
  echo Error: freebsd-ufs partition not found on /dev/$DEV
  exit 1
fi

echo -n "Creating UFS on ${PART} ..."
if ! /sbin/newfs -O2 -U ${PART} > /dev/null 2> /dev/null; then
  echo " error"
  exit 1
fi
echo " done"

# Mount and populate ufs
echo -n "Mounting $PART on ${MNT} ..."
/bin/mkdir -p ${MNT}
if ! /sbin/mount ${PART} ${MNT} > /dev/null 2> /dev/null; then
  echo " error mounting ${PART}"
  exit 1
fi
echo " done"

echo -n "Extracting FreeBSD distribution ..."
for file in ${EXTRACT_FILES}; do
  if ! /usr/bin/tar -C ${MNT} -x -f ${file} > /dev/null 2> /dev/null; then
    echo " error"
    exit 1
  fi
done
echo " done"

# Write fstab
echo -n "Writing /etc/fstab..."
rm -f ${MNT}/etc/fstab
touch ${MNT}/etc/fstab
if [ -n "${FSWAP}" ]; then
  echo "/dev/${FSWAP} none swap sw 0 0" > ${MNT}/etc/fstab
fi
echo ${PART} / ufs rw,noatime 0 0 >> ${MNT}/etc/fstab
echo " done"

echo ""
echo "Installation complete."
echo "The system will boot from UFS with clean install on next reboot"
echo ""
echo "You may make adjustments to the installed system using chroot:" 
echo "chroot ${MNT}"
echo ""
echo "Some adjustments may require a mounted devfs:"
echo "mount -t devfs devfs ${MNT}/dev"
